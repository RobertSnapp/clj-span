;;; Copyright 2009 Gary Johnson
;;;
;;; This file is part of clj-span.
;;;
;;; clj-span is free software: you can redistribute it and/or modify
;;; it under the terms of the GNU General Public License as published
;;; by the Free Software Foundation, either version 3 of the License,
;;; or (at your option) any later version.
;;;
;;; clj-span is distributed in the hope that it will be useful, but
;;; WITHOUT ANY WARRANTY; without even the implied warranty of
;;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
;;; General Public License for more details.
;;;
;;; You should have received a copy of the GNU General Public License
;;; along with clj-span.  If not, see <http://www.gnu.org/licenses/>.

(ns clj-span.agents)

(defstruct location :source :sink :use :flow-features :carrier-cache)

(defn- create-dummy-world
  [rows cols]
  (for [i rows]
    (for [j cols]
       (ref (struct cell ))

;; The world is a 2D grid of cells
(def world (create-dummy-world 80 80))






(defmacro defcarrier
  "SPAN carrier definition."
  [name & forms]
  (if (odd? (count forms))
    (let [doc-string (first forms)]
      `(defstruct #{:private true :doc ~doc-string :span-role :carrier} ~name
		  properties  (into {} (map vec (partition 2 (rest forms))))]
      ...


(defn check-types
  [struct]

(defn make-service
  [& properties]
  {:pre [(type)   ]}

(defstruct service :carrier :source :sink :use)
(defstruct carrier :origin :weight :movement :decay :weight-branching :min-weight)
(defstruct source  :source-type :source-rate :source-limit)
(defstruct sink    :sink-type   :sink-rate   :sink-limit   :recovery-rate)
(defstruct use     :use-type    :use-rate    :use-limit    :recovery-rate :rival?)

(defmacro defservice
  "SPAN Ecosystem Service definition."
  [name & forms]
  (let [[doc-string properties] (if (odd? (count forms))
				  [(first forms) (rest forms)]
				  [nil forms])]
    `(def #^{:doc ~doc-string :span-role :service} ~name
	  (struct-map service ~@properties))))

(defservice surface-water-provision-to-farmers
  "The Ecosystem Service of providing above ground water to farmers."
  :carrier sledder
  :source  surface-water
  :sink    water-infiltration
  :use     water-extraction-by-farmers)

(defcarrier sledder
  "This agent always moves downhill by the steepest path."
  :origin           :source
  :weight           surface-water
  :movement         surface-water-downhill-steepest-path
  :decay            nil
  :weight-branching even-split
  :min-weight       0.1)

(defcarrier sledder-foo
  "This agent always moves downhill by the steepest path."
  :initial-weight   (fn [start-location] (vector (:source-quantity start-location) (:source-quality start-location)))
  :movement         (fn [current-location] (steepest-downhill (cons current-location (:neighbors current-location))))
  :decay            nil
  :weight-branching (fn [weight next-locations] (let [num-next (count next-locations)]
						  (if (== num-next 1)
						    weight
						    (repeat num-next (/ weight num-next)))))
  :min-weight       0.1)

(defsource surface-water
  "Runoff generated by precipitation, snowmelt, and wellsprings."
  :production-rate  'waterEcology:runoffRate
  :production-limit nil)

(defsink water-infiltration
  "Surface water infiltration due to soil permeability."
  :sink-type     :absolute
  :sink-rate     'waterEcology:infiltrationRate
  :sink-limit    'waterEcology:infiltrationCapacity
  :recovery-rate 'waterEcology:infiltrationRecoveryRate)

(defuse water-extraction-by-farmers
  "Extraction of surface water by human consumers."
  :rival?        true
  :use-type      :absolute
  :use-rate      'waterEconomics:extractionRateByFarmers
  :use-limit     'waterEconomics:extractionLimitByFarmers
  :recovery-rate 'waterEconomics:extractionRecoveryRateByFarmers)
